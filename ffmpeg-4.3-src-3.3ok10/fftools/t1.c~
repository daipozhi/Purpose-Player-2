
static int deb_sr_fft_trans_all(VideoState *is,long pcm)
{
  float  d1;
  long   i,j,k,l,m,n,p,q;
  char   c1,c2,cc[2];
  long   m1,m2,m3,m4,m5,m6,n0,q1;

  l=deb_sr_fft_start;

  while(1)
  {
    if (((deb_sr_sample_over2==0)&&(l<deb_sr_fft_end))||
	((deb_sr_sample_over2==1)&&(l<deb_sr_sample_size)))
    {
        exist=0;

        for (q=0;q<FFT_THR;q++)
        {
          if (fft_stt[q][0]==0)  // not loaded
          {
            exist=1;
            break;
          }
        }

        if (exist==0)
        {
          av_usleep((int64_t)(0.01 * 1000000.0));
          continue;
        }

        for (j=0;j<deb_sr_ch;j=j+deb_sr_ch)
	{
          for (m=0;m<FFT_BUFFER_SIZE;m++)
	  {		
		p=l+m*deb_sr_ch+j/deb_sr_ch;

		if ((p<0)||(p>=deb_sr_sample_size)) continue;

		n=is->sample_array[p];
		
		n=n/3;   // reduce volumn , prevent 16bit int overflow

	        set_dlp_real_in1(q,m,(float)n);
	  }
        }

        fft_stt[q][1]=deb_sr_river_pp; // output data id
        fft_stt[q][2]=l;
        fft_stt[q][3]=pcm;
        fft_stt[q][0]=1; // loaded, fft thread start to calculate

	l=l+FFT_BUFFER_SIZE*deb_sr_ch; // input data id

	deb_sr_river_pp++;

	if (deb_sr_river_pp>=1000) //ring buffer ,output id
	{
	    deb_sr_river_pp=0;
	    deb_sr_river_over=1;
	}

	if (deb_sr_sample_over2==1)  //ring buffer ,input id
	{
	  if (l>=deb_sr_sample_size)
	  {
		l=l-deb_sr_sample_size;
		deb_sr_sample_over2=0;
	  }
	}

    }
    else
    {
	break;
    }
  }

  return(0);
}

static int deb_fft1_thr(void)
{
  int i,l,m,q;
  int pcm;

  q=0;

  while(1)
  {
    if (fft_stt[q][0]!=1) av_usleep((int64_t)(0.01 * 1000000.0));
    else
    {
	  // transform to freq
	  i=deb_fft1_fft_float(FFT_BUFFER_SIZE,dlp_real_in1[q],dlp_real_ou1[q],dlp_imag_ou1[q]);
	  if (i!=0) return(1);

	  // store to buffer for multi get
	  for (m=0;m<FFT_BUFFER_SIZE;m++)
	  {
		d1=get_dlp_real_ou1(q,m);
        	set_dlp_real_ou2(q,m,d1);

		d1=get_dlp_imag_ou1(q,m);
        	set_dlp_imag_ou2(q,m,d1);
	  }

          pcm=fft_stt[q][3];
          l  =fft_stt[q][2];

#if DPZ_DEBUG2
	  for (i=0;i<1;i++)
	  {
	    // 1st to 512th chn 
            m=deb_sr_fft_cx(i,pcm,l);
            if (m!=0) return(1);
	  }
#else
	  for (i=0;i<512;i++)
	  {
	    // 1st to 70th chn 
            m=deb_fft1_cx(i,pcm,l);
            if (m!=0) return(1);
	  }
#endif
          fft_stt[q][0]=0;
    }
  }


  return(0);
}
 
static char m601_str1[300];

static int deb_fft1_cx(int chn,int pcm,int mark)
{
  float  d1;
  long   i,j,k,l,m,n,p,q;
  char   cc[6];
  float  f1,f2;
  long long int lp;
  //char   str1[300];

  q=0;

  if ((chn<0)||(chn>=512)) return(0);

#if DPZ_DEBUG2

  // get 1 of 3 chn data each times
  for (m=0;m<FFT_BUFFER_SIZE;m++)
  {
    f1=pcm*((float)m/(float)FFT_BUFFER_SIZE);

    if (deb_sr_fft_deb_chn==0) // to playback high freq , low freq ,middle freq ,to sure fft is ok
    {
    if (((f1>=deb_sr_frq[0])&&(f1<deb_sr_frq[28]))||
        ((f1>pcm-deb_sr_frq[28])&&(f1<=pcm-deb_sr_frq[0])))  // ??? > >= < <=

    //if (((m>=frq1)&&(m<frq2))||
    //    ((m>=FFT_BUFFER_SIZE-frq2)&&(m<FFT_BUFFER_SIZE-frq1)))

    {
	d1=get_dlp_real_ou2(m);
	set_dlp_real_in1(m,d1);
	d1=get_dlp_imag_ou2(m);
	set_dlp_imag_ou1(m,d1);
    }
    else
    {
	set_dlp_real_in1(m,0);
        set_dlp_imag_ou1(m,0);
    }
    }


    if (deb_sr_fft_deb_chn==1)
    {
    if (((f1>=deb_sr_frq[28])&&(f1<deb_sr_frq[49]))||
        ((f1>pcm-deb_sr_frq[49])&&(f1<=pcm-deb_sr_frq[28])))  // ??? > >= < <=

    //if (((m>=frq1)&&(m<frq2))||
    //    ((m>=FFT_BUFFER_SIZE-frq2)&&(m<FFT_BUFFER_SIZE-frq1)))

    {
	d1=get_dlp_real_ou2(m);
	set_dlp_real_in1(m,d1);
	d1=get_dlp_imag_ou2(m);
	set_dlp_imag_ou1(m,d1);
    }
    else
    {
	set_dlp_real_in1(m,0);
        set_dlp_imag_ou1(m,0);
    }
    }


    if (deb_sr_fft_deb_chn==2)
    {
    if (((f1>=deb_sr_frq[49])&&(f1<deb_sr_frq[70]))||
        ((f1>pcm-deb_sr_frq[70])&&(f1<=pcm-deb_sr_frq[49])))  // ??? > >= < <=

    //if (((m>=frq1)&&(m<frq2))||
    //    ((m>=FFT_BUFFER_SIZE-frq2)&&(m<FFT_BUFFER_SIZE-frq1)))

    {
	d1=get_dlp_real_ou2(m);
	set_dlp_real_in1(m,d1);
	d1=get_dlp_imag_ou2(m);
	set_dlp_imag_ou1(m,d1);
    }
    else
    {
	set_dlp_real_in1(m,0);
        set_dlp_imag_ou1(m,0);
    }
    }


  }

  // transform to pcm wave data
  i=deb_sr_ifft_float(FFT_BUFFER_SIZE,dlp_real_in1,dlp_real_ou1,dlp_imag_ou1);
  if (i!=0) return(1);


  // play back
  for (m=0;m<FFT_BUFFER_SIZE;m++)
  {
    f2=get_dlp_real_ou1(m);

    if (f2>=0) j=(int)(f2+0.5);
    else       j=(int)(f2-0.5);
    
    for (p=0;p<deb_sr_ch;p++)
    {
	if (p==0) deb_sr_fft_deb[deb_sr_fft_deb_pp2][m*deb_sr_ch+p]=j;
	else      deb_sr_fft_deb[deb_sr_fft_deb_pp2][m*deb_sr_ch+p]=0;
    }
  }

  deb_sr_fft_deb_pp2++;
  if (deb_sr_fft_deb_pp2>=4) deb_sr_fft_deb_pp2=0;

  if ((deb_sr_river_pp<0)||(deb_sr_river_pp>=200)) return(0);

  deb_sr_river[deb_sr_river_pp][chn]=n;
  deb_sr_river_mark[deb_sr_river_pp]=mark;

#else

  // get 1 of 512 chn data each times
  for (m=0;m<FFT_BUFFER_SIZE;m++)
  {
    //f1=pcm*((float)m/(float)FFT_BUFFER_SIZE);

    //if (((f1>=deb_sr_frq[chn])&&(f1<deb_sr_frq[chn+1]))||
    //    ((f1>pcm-deb_sr_frq[chn+1])&&(f1<=pcm-deb_sr_frq[chn])))  // ??? > >= < <=

    //if (((m>=frq1)&&(m<frq2))||
    //    ((m>=FFT_BUFFER_SIZE-frq2)&&(m<FFT_BUFFER_SIZE-frq1)))

    if (m==chn)
    {
	d1=get_dlp_real_ou2(q,m);
	set_dlp_real_in1(q,m,d1);
	d1=get_dlp_imag_ou2(q,m);
	set_dlp_imag_ou1(q,m,d1);
    }
    else
    {
	set_dlp_real_in1(q,m,0);
        set_dlp_imag_ou1(q,m,0);
    }
  }

  // transform to pcm wave data
  i=deb_fft1_ifft_float(FFT_BUFFER_SIZE,dlp_real_in1[q],dlp_real_ou1[q],dlp_imag_ou1[q]);
  if (i!=0) return(1);

  // sum volumn
  lp=0;

  for (m=0;m<FFT_BUFFER_SIZE;m++)
  {
    j=(int)get_dlp_real_ou1(q,m);
    if (j<0) j= 0-j;
    lp=lp+j;
  }

  #if DPZ_DEBUG1
  //sprintf(m601_str1,"fft cx,lp=%lld,",lp);
  //deb_record(m601_str1);
  #endif

  lp=lp/FFT_BUFFER_SIZE;

  if (lp<0) lp=0;

  //lp=lp*lp;  // a sound's watt , nW=nV*nV/nR
	
  n=0;

  for (i=0;i<70;i++)  // a sound's db
  {
    if (lp>=deb_sr_db[i])
    {
      n=i;
      continue;
    }
    else break;
  }

  if (n<0  ) n=0;
  if (n>=70) n=69;

  p=fft_stt[q][1];

  if ((p<0)||(p>=1000)) return(0);

  deb_sr_river[p][chn]=n;
  deb_sr_river_mark[p]=mark;

  #if DPZ_DEBUG1
  //sprintf(m601_str1,"fft cx,river_pp=%d,chn=%d,val=%d,mark=%d,",deb_sr_river_pp,chn,n,mark);
  //deb_record(m601_str1);
  #endif

#endif
  return(0);
}
/*
static int deb_sr_cc2i(char c1,char c2)
{*/
  /* error ---
  unsigned short i;
  short          j;
  i=(unsigned char)c2*256+(unsigned char)c1;
  j=(short)i;
  return((int)j);
  
*/
  /* error ---
  if (c2>=0) return(c2*256+(unsigned char)c1);
  else       return(c2*256-(unsigned char)c1);
  */
/*
  return(c2*256+(unsigned char)c1);

}
*//*
static void deb_sr_i2cc(int k,char *cc)
{
  int  sign;
  long cvnl;

  if (k<0)
  {
    sign=(-1);
    cvnl=k;
    cvnl=(-1)*cvnl;
    if ((cvnl/256)*256-cvnl!=0)
    {
      cc[1]=(cvnl+256)/256;
      cc[0]=(char)(cc[1]*256-cvnl);
    }
    else
    {
      cc[1]=cvnl/256;
      cc[0]=0;
    }
  }
  else
  {
    sign=1;
    cc[1]=k/256;
    cc[0]=k-cc[1]*256;
  }

  cc[1]=sign*cc[1];
}
*/

