
//static    int     deb_sr_fft_trans_all(VideoState *is,long pcm);
//static    int     deb_sr_fft_set_db(long pcm);

static int deb_fft2_thr(void);
static int deb_fft2_cx(int chn,int pcm,int mark);

//static    int     deb_fft2_cc2i(char c1,char c2);
//static    void    deb_fft2_i2cc(int k,char *cc);

#define TRUE  1
#define FALSE 0

#define BITS_PER_WORD   (sizeof(long)*8)

#define    DDC_PI   3.1415926535897932
//#define  DDC_PI  (3.1415926535897932384626433)
//#define  DDC_PI  (3.14159265358979323846264338327950288419)


  static  int  deb_fft2_fft_float
         ( long     NumSamples,           /* must be a power of 2 */
           float  *RealIn,               /* array of input's real samples */
           float  *RealOut,              /* array of output's reals */
           float  *ImaginaryOut );       /* array of output's imaginaries */


  static  int  deb_fft2_ifft_float
         ( long     NumSamples,           /* must be a power of 2 */
           float  *RealIn,               /* array of input's real samples */
           float  *RealOut,              /* array of output's reals */
           float  *ImaginaryOut );       /* array of output's imaginaries */



  static long deb_fft2_IsPowerOfTwo(long x);
  static long deb_fft2_NumberOfBitsNeeded(long PowerOfTwo);
  static long deb_fft2_ReverseBits(long index,long NumBits);

//*
//**   The following function returns an "abstract frequency" of a
//**   given index into a buffer with a given number of frequency samples.
//**   Multiply return value by sampling rate to get frequency expressed in Hz.
//

    static float deb_fft2_Index_to_frequency (long NumSamples,long Index );

    static int   deb_fft2_CheckPointer (float *p);


